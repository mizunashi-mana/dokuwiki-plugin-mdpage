version: 2

jobs:
    build:
        docker:
            - image: circleci/php:7.1-node-browsers
        steps:
            - checkout

            - run: sudo composer self-update

            - run: make
            - run: mkdir -p /tmp/artifacts
            - run: cp archive.tar.gz /tmp/artifacts/plugin-package.tar.gz

            - persist_to_workspace:
                root: /tmp/artifacts
                paths:
                    - plugin-package.tar.gz

    test:
        docker:
            - image: circleci/php:7.1-node-browsers
        steps:
            - checkout

            - run: sudo composer self-update

            - restore_cache:
                keys:
                    - composer-v1-{{ checksum "composer.lock" }}
                    # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
                    - composer-v1-
            - run: composer install --no-ansi --no-interaction --prefer-dist
            # `_test` directory of dokuwiki is not included by `--prefer-dist` (maybe, this is GitHub issue).
            # This is the fallback.
            - run: |
                if [ ! -d vendor/splitbrain/dokuwiki/_test ]; then
                    rm -rf vendor/splitbrain/dokuwiki
                    composer install --no-ansi --no-interaction --prefer-source
                fi
            - save_cache:
                key: composer-v1-{{ checksum "composer.lock" }}
                paths:
                    - vendor

            - run: ./bin/php-cs-fixer fix --dry-run

            - run: |
                curl -o cc-test-reporter -sSL https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
                chmod +x ./cc-test-reporter

            - run: |
                sudo docker-php-ext-enable xdebug

            - run: |
                ./cc-test-reporter before-build
                composer test -- --coverage-clover clover.xml
                ./cc-test-reporter after-build --exit-code $? \
                    --coverage-input-type clover

    docker-test:
        machine:
            image: ubuntu-1604:201903-01
        steps:
            - checkout

            - run: docker-compose build

            - restore_cache:
                keys:
                    - composer-v1-{{ checksum "composer.lock" }}
                    # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
                    - composer-v1-

            - run: |
                docker-compose up -d
                sleep 10

            - run: |
                curl -v http://localhost:8080/start | \
                    grep 'simple paragraph: <em>emph</em>, <strong>strong</strong> and <code>mono</code>.'

            - run: docker-compose down

    deploy:
        docker:
            - image: circleci/golang:1.8
        steps:
            - checkout

            - attach_workspace:
                at: /tmp/artifacts

            - run: go get github.com/tcnksm/ghr

            - run: |
                VERSION="${CIRCLE_TAG}"
                ghr \
                    -t ${GITHUB_TOKEN} \
                    -u ${CIRCLE_PROJECT_USERNAME} \
                    -r ${CIRCLE_PROJECT_REPONAME} \
                    -c ${CIRCLE_SHA1} \
                    -n "Release ${VERSION}" \
                    "${VERSION}" \
                    /tmp/artifacts

            - run: |
                VERSION="${CIRCLE_TAG}"
                git config user.email "release-bot@users.noreply.github.com"
                git config user.name "release-bot"
                git checkout release || git checkout -b release
                cp /tmp/artifacts/plugin-package.tar.gz .
                git add -f plugin-package.tar.gz
                git commit -m "Automatic release $VERSION"
                git remote add for-release \
                   "https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
                git push -u for-release release

workflows:
    version: 2
    test:
        jobs:
            - test:
                filters:
                    branches:
                        ignore: release
            - docker-test:
                requires:
                    - test
                filters:
                    branches:
                        ignore: release
    build-and-deploy:
        jobs:
            - build:
                filters:
                    branches:
                        only: master
                    tags:
                        only: /.*/
            - deploy:
                requires:
                    - build
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /^v\d+\.\d+\.\d+$/
